-- Generated by Oracle SQL Developer Data Modeler 3.1.0.700
--   at:        2013-12-07 16:04:58 EST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



DROP TABLE APPLICATION_USER CASCADE CONSTRAINTS 
;
DROP TABLE CONSTRUCTION_PROJECT CASCADE CONSTRAINTS 
;
DROP TABLE CONSTRUCTION_PROJECT_STAGE CASCADE CONSTRAINTS 
;
DROP TABLE CONSTRUCTION_WORKER CASCADE CONSTRAINTS 
;
DROP TABLE CONSTRUCTION_WORKER_CREW CASCADE CONSTRAINTS 
;
DROP TABLE CONTRACT CASCADE CONSTRAINTS 
;
DROP TABLE CREW CASCADE CONSTRAINTS 
;
DROP TABLE CREW_MANAGER CASCADE CONSTRAINTS 
;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS 
;
DROP TABLE CUSTOMER_CONTRACT CASCADE CONSTRAINTS 
;
DROP TABLE DISCLOSURE_FORM CASCADE CONSTRAINTS 
;
DROP TABLE ELEVATION CASCADE CONSTRAINTS 
;
DROP TABLE EMPLOYEE CASCADE CONSTRAINTS 
;
DROP TABLE FLOOR CASCADE CONSTRAINTS 
;
DROP TABLE HOUSE CASCADE CONSTRAINTS 
;
DROP TABLE HOUSE_LAYOUT CASCADE CONSTRAINTS 
;
DROP TABLE HOUSE_SALES_AGENT CASCADE CONSTRAINTS 
;
DROP TABLE LOT CASCADE CONSTRAINTS 
;
DROP TABLE OPTION_CHOICE CASCADE CONSTRAINTS 
;
DROP TABLE PROJECT_MANAGER CASCADE CONSTRAINTS 
;
DROP TABLE ROOM CASCADE CONSTRAINTS 
;
DROP TABLE ROOM_ON_A_FLOOR CASCADE CONSTRAINTS 
;
DROP TABLE SALE CASCADE CONSTRAINTS 
;
DROP TABLE SALES_AGENT CASCADE CONSTRAINTS 
;
DROP TABLE SCHOOL CASCADE CONSTRAINTS 
;
DROP TABLE SCHOOL_DISTRICT CASCADE CONSTRAINTS 
;
DROP TABLE SELECTED_STAGE_OPTION CASCADE CONSTRAINTS 
;
DROP TABLE STAGE CASCADE CONSTRAINTS 
;
DROP TABLE STYLE CASCADE CONSTRAINTS 
;
DROP TABLE STYLE_ELEVATION CASCADE CONSTRAINTS 
;
DROP TABLE SUBDIVISION CASCADE CONSTRAINTS 
;
DROP TABLE SUBDIVISION_AGREEMENT CASCADE CONSTRAINTS 
;
DROP TABLE SUBDIVISION_ALLOWABLE_STYLE CASCADE CONSTRAINTS 
;
DROP TABLE TASK CASCADE CONSTRAINTS 
;
DROP TABLE TASK_UPDATE CASCADE CONSTRAINTS 
;
DROP TABLE CONSTRUCTION_END_TODAY
;

CREATE TABLE APPLICATION_USER 
    ( 
     app_user_id NUMBER  NOT NULL , 
     username VARCHAR2 (50)  NOT NULL , 
     password VARCHAR2 (16)  NOT NULL , 
     password_recovery_question VARCHAR2 (50)  NOT NULL , 
     password_recovery_answer VARCHAR2 (50)  NOT NULL , 
     email VARCHAR2 (25)  NOT NULL CHECK ( email LIKE '%@%') , 
     is_active CHAR (1) DEFAULT 'Y'  NOT NULL CHECK ( is_active IN ('N', 'Y')) 
    ) 
;



ALTER TABLE APPLICATION_USER 
    ADD CONSTRAINT Application_User_PK PRIMARY KEY ( app_user_id ) ;



CREATE TABLE CONSTRUCTION_PROJECT 
    ( 
     construction_project_id NUMBER  NOT NULL , 
     start_date DATE  NOT NULL , 
     estimated_end_date DATE  NOT NULL , 
     end_date DATE , 
     project_manager_employee_id NUMBER  NOT NULL , 
     crew_id NUMBER , 
     house_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CONSTRUCTION_PROJECT 
    ADD CONSTRAINT Construction_Project_PK PRIMARY KEY ( construction_project_id ) ;



CREATE TABLE CONSTRUCTION_PROJECT_STAGE 
    ( 
     construction_project_stage_id NUMBER  NOT NULL , 
     start_date DATE  NOT NULL , 
     estimated_end_date DATE  NOT NULL , 
     end_date DATE , 
     construction_project_id NUMBER  NOT NULL , 
     stage_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CONSTRUCTION_PROJECT_STAGE 
    ADD CONSTRAINT Construction_Project_Stage_PK PRIMARY KEY ( construction_project_stage_id ) ;



CREATE TABLE CONSTRUCTION_WORKER 
    ( 
     skill_one VARCHAR2 (25)  NOT NULL , 
     skill_two VARCHAR2 (25) , 
     skill_three VARCHAR2 (25) , 
     employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CONSTRUCTION_WORKER 
    ADD CONSTRAINT CONSTRUCTION_WORKER_PK PRIMARY KEY ( employee_id ) ;



CREATE TABLE CONSTRUCTION_WORKER_CREW 
    ( 
     construction_worker_crew_id NUMBER  NOT NULL , 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     crew_id NUMBER  NOT NULL , 
     constr_worker_employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CONSTRUCTION_WORKER_CREW 
    ADD CONSTRAINT Construction_Worker_Crew_PK PRIMARY KEY ( construction_worker_crew_id ) ;



CREATE TABLE CONTRACT 
    ( 
     contract_id NUMBER  NOT NULL , 
     submitted_date DATE , 
     time_limit_date DATE , 
     scanned_image BLOB , 
     is_terminated CHAR (1) DEFAULT 'N' CHECK ( is_terminated IN ('N', 'Y')) , 
     disclosure_form_id NUMBER  NOT NULL , 
     subdivision_agreement_id NUMBER  NOT NULL , 
     house_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CONTRACT 
    ADD CONSTRAINT Contract_PK PRIMARY KEY ( contract_id ) ;



CREATE TABLE CREW 
    ( 
     crew_id NUMBER  NOT NULL , 
     crew_manager_employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CREW 
    ADD CONSTRAINT Crew_PK PRIMARY KEY ( crew_id ) ;



CREATE TABLE CREW_MANAGER 
    ( 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CREW_MANAGER 
    ADD CONSTRAINT CREW_MANAGER_PK PRIMARY KEY ( employee_id ) ;



CREATE TABLE CUSTOMER 
    ( 
     customer_id NUMBER  NOT NULL , 
     first_name VARCHAR2 (50)  NOT NULL , 
     last_name VARCHAR2 (50)  NOT NULL , 
     phone_number VARCHAR2 (14) , 
     mortgage_info VARCHAR2 (250) , 
     app_user_id NUMBER 
    ) 
;



ALTER TABLE CUSTOMER 
    ADD CONSTRAINT Customer_PK PRIMARY KEY ( customer_id ) ;



CREATE TABLE CUSTOMER_CONTRACT 
    ( 
     customer_contract_id NUMBER  NOT NULL , 
     customer_id NUMBER  NOT NULL , 
     contract_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE CUSTOMER_CONTRACT 
    ADD CONSTRAINT Customer_Contract_PK PRIMARY KEY ( customer_contract_id ) ;



CREATE TABLE DISCLOSURE_FORM 
    ( 
     disclosure_form_id NUMBER  NOT NULL , 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     description VARCHAR2 (250)  NOT NULL 
    ) 
;



ALTER TABLE DISCLOSURE_FORM 
    ADD CONSTRAINT Disclosure_form_PK PRIMARY KEY ( disclosure_form_id ) ;



CREATE TABLE ELEVATION 
    ( 
     elevation_id NUMBER  NOT NULL , 
     type VARCHAR2 (1)  NOT NULL CHECK ( type IN ('A', 'B', 'C')) , 
     description VARCHAR2 (250) , 
     additional_cost NUMBER (9,2) 
    ) 
;



ALTER TABLE ELEVATION 
    ADD CONSTRAINT Elevation_PK PRIMARY KEY ( elevation_id ) ;


ALTER TABLE ELEVATION 
    ADD CONSTRAINT ELEVATION_type_UN UNIQUE ( type ) ;



CREATE TABLE EMPLOYEE 
    ( 
     employee_id NUMBER  NOT NULL , 
     first_name VARCHAR2 (50)  NOT NULL , 
     last_name VARCHAR2 (50)  NOT NULL , 
     street VARCHAR2 (40)  NOT NULL , 
     city VARCHAR2 (25)  NOT NULL , 
     state VARCHAR2 (2)  NOT NULL CHECK ( state IN ('AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY')) , 
     zipcode VARCHAR2 (10)  NOT NULL , 
     home_phone VARCHAR2 (14)  NOT NULL , 
     work_phone VARCHAR2 (14) , 
     cell_phone VARCHAR2 (14) , 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     app_user_id NUMBER 
    ) 
;



ALTER TABLE EMPLOYEE 
    ADD CONSTRAINT Employee_PK PRIMARY KEY ( employee_id ) ;



CREATE TABLE FLOOR 
    ( 
     floor_id NUMBER  NOT NULL , 
     description VARCHAR2 (250)  NOT NULL , 
     house_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE FLOOR 
    ADD CONSTRAINT Floor_PK PRIMARY KEY ( floor_id ) ;



CREATE TABLE HOUSE 
    ( 
     house_id NUMBER  NOT NULL , 
     escrow_amount NUMBER (9,2) , 
     is_reversed CHAR (1) DEFAULT 'N' CHECK ( is_reversed IN ('N', 'Y')) , 
     financing_info VARCHAR2 (250) , 
     house_layout_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE HOUSE 
    ADD CONSTRAINT House_PK PRIMARY KEY ( house_id ) ;



CREATE TABLE HOUSE_LAYOUT 
    ( 
     house_layout_id NUMBER  NOT NULL , 
     house_reverse_layout_id NUMBER , 
     name VARCHAR2 (50)  NOT NULL , 
     description VARCHAR2 (250)  NOT NULL 
    ) 
;



ALTER TABLE HOUSE_LAYOUT 
    ADD CONSTRAINT HOUSE_LAYOUT_PK PRIMARY KEY ( house_layout_id ) ;



CREATE TABLE HOUSE_SALES_AGENT 
    ( 
     house_sales_agent_id NUMBER  NOT NULL , 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     is_main_sales_agent CHAR (1) DEFAULT 'N'  NOT NULL CHECK ( is_main_sales_agent IN ('N', 'Y')) , 
     sales_agent_employee_id NUMBER  NOT NULL , 
     house_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE HOUSE_SALES_AGENT 
    ADD CONSTRAINT House_Sales_Agent_PK PRIMARY KEY ( house_sales_agent_id ) ;



CREATE TABLE LOT 
    ( 
     lot_id NUMBER  NOT NULL , 
     lot_size VARCHAR2 (250) , 
     premium NUMBER (9,2)  NOT NULL , 
     street VARCHAR2 (40)  NOT NULL , 
     latitude NUMBER , 
     longitude NUMBER , 
     style_elevation_id NUMBER , 
     subdivision_id NUMBER  NOT NULL , 
     house_id NUMBER 
    ) 
;



ALTER TABLE LOT 
    ADD CONSTRAINT Lot_PK PRIMARY KEY ( lot_id ) ;



CREATE TABLE OPTION_CHOICE 
    ( 
     option_choice_id NUMBER  NOT NULL , 
     option_category VARCHAR2 (25)  NOT NULL CHECK ( option_category IN ('Decoration', 'Electrical', 'Exterior', 'Fixture', 'Flooring', 'Interior', 'Plumbing', 'Wall Texture')) , 
     description VARCHAR2 (250)  NOT NULL , 
     price NUMBER (9,2)  NOT NULL , 
     last_allowed_stage_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE OPTION_CHOICE 
    ADD CONSTRAINT Option_Choice_PK PRIMARY KEY ( option_choice_id ) ;



CREATE TABLE PROJECT_MANAGER 
    ( 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE PROJECT_MANAGER 
    ADD CONSTRAINT PROJECT_MANAGER_PK PRIMARY KEY ( employee_id ) ;



CREATE TABLE ROOM 
    ( 
     room_id NUMBER  NOT NULL , 
     room_type VARCHAR2 (25)  NOT NULL CHECK ( room_type IN ('Attic', 'Basement', 'Bathroom', 'Bedroom', 'Den', 'Dining Room', 'Foyer', 'Garage', 'Hall', 'Kitchen', 'Laundry Room', 'Living Room', 'Mud Room', 'Office', 'Study', 'Work Room')) , 
     ceiling_type VARCHAR2 (15) DEFAULT 'standard' CHECK ( ceiling_type IN ('standard', 'tall cathedral', 'vaulted')) , 
     description VARCHAR2 (250) 
    ) 
;



ALTER TABLE ROOM 
    ADD CONSTRAINT Room_PK PRIMARY KEY ( room_id ) ;



CREATE TABLE ROOM_ON_A_FLOOR 
    ( 
     room_on_a_floor_id NUMBER  NOT NULL , 
     room_size VARCHAR2 (250) , 
     num_windows NUMBER (2) CHECK ( num_windows BETWEEN 0 AND 99) , 
     floor_id NUMBER  NOT NULL , 
     room_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE ROOM_ON_A_FLOOR 
    ADD CONSTRAINT Room_On_A_Floor_PK PRIMARY KEY ( room_on_a_floor_id ) ;



CREATE TABLE SALE 
    ( 
     sale_id NUMBER  NOT NULL , 
     escrow_paid CHAR (1) DEFAULT 'N' CHECK ( escrow_paid IN ('N', 'Y')) , 
     financing_option VARCHAR2 (15) CHECK ( financing_option IN ('cash', 'mortgage', 'unknown')) , 
     house_id NUMBER  NOT NULL , 
     employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SALE 
    ADD CONSTRAINT Sale_PK PRIMARY KEY ( sale_id ) ;



CREATE TABLE SALES_AGENT 
    ( 
     title VARCHAR2 (250)  NOT NULL , 
     license_number VARCHAR2 (15)  NOT NULL , 
     employee_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SALES_AGENT 
    ADD CONSTRAINT SALES_AGENT_PK PRIMARY KEY ( employee_id ) ;



CREATE TABLE SCHOOL 
    ( 
     school_id NUMBER  NOT NULL , 
     name VARCHAR2 (50)  NOT NULL , 
     school_district_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SCHOOL 
    ADD CONSTRAINT School_PK PRIMARY KEY ( school_id ) ;



CREATE TABLE SCHOOL_DISTRICT 
    ( 
     school_district_id NUMBER  NOT NULL , 
     name VARCHAR2 (50)  NOT NULL 
    ) 
;



ALTER TABLE SCHOOL_DISTRICT 
    ADD CONSTRAINT School_District_PK PRIMARY KEY ( school_district_id ) ;


ALTER TABLE SCHOOL_DISTRICT 
    ADD CONSTRAINT SCHOOL_DISTRICT_name_UN UNIQUE ( name ) ;



CREATE TABLE SELECTED_STAGE_OPTION 
    ( 
     selected_stage_option_id NUMBER  NOT NULL , 
     selected_date DATE  NOT NULL , 
     option_choice_id NUMBER  NOT NULL , 
     construction_project_stage_id NUMBER  NOT NULL , 
     customer_price NUMBER (9,2)  NOT NULL 
    ) 
;



ALTER TABLE SELECTED_STAGE_OPTION 
    ADD CONSTRAINT Selected_Stage_Option PRIMARY KEY ( selected_stage_option_id ) ;



CREATE TABLE STAGE 
    ( 
     stage_id NUMBER  NOT NULL , 
     stage_number NUMBER  NOT NULL CHECK ( stage_number <= 7) , 
     description VARCHAR2 (250) 
    ) 
;



ALTER TABLE STAGE 
    ADD CONSTRAINT Stage_PK PRIMARY KEY ( stage_id ) ;



CREATE TABLE STYLE 
    ( 
     style_id NUMBER  NOT NULL , 
     name VARCHAR2 (50)  NOT NULL , 
     description VARCHAR2 (250) , 
     base_price NUMBER (9,2)  NOT NULL , 
     floorplan_link_one VARCHAR2 (250) , 
     floorplan_link_two VARCHAR2 (250) , 
     floorplan_link_three VARCHAR2 (250) 
    ) 
;



ALTER TABLE STYLE 
    ADD CONSTRAINT Style_PK PRIMARY KEY ( style_id ) ;


ALTER TABLE STYLE 
    ADD CONSTRAINT STYLE_name_UN UNIQUE ( name ) ;



CREATE TABLE STYLE_ELEVATION 
    ( 
     style_elevation_id NUMBER  NOT NULL , 
     style_id NUMBER  NOT NULL , 
     elevation_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE STYLE_ELEVATION 
    ADD CONSTRAINT STYLE_ELEVATION_PK PRIMARY KEY ( style_elevation_id ) ;



CREATE TABLE SUBDIVISION 
    ( 
     subdivision_id NUMBER  NOT NULL , 
     name VARCHAR2 (50)  NOT NULL , 
     city VARCHAR2 (25)  NOT NULL , 
     state VARCHAR2 (2)  NOT NULL CHECK ( state IN ('AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY')) , 
     zipcode VARCHAR2 (10)  NOT NULL , 
     map BLOB , 
     school_district_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SUBDIVISION 
    ADD CONSTRAINT Subdivision_PK PRIMARY KEY ( subdivision_id ) ;



CREATE TABLE SUBDIVISION_AGREEMENT 
    ( 
     subdivision_agreement_id NUMBER  NOT NULL , 
     description VARCHAR2 (250) , 
     start_date DATE  NOT NULL , 
     end_date DATE , 
     subdivision_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SUBDIVISION_AGREEMENT 
    ADD CONSTRAINT Subdivision_Agreement_PK PRIMARY KEY ( subdivision_agreement_id ) ;



CREATE TABLE SUBDIVISION_ALLOWABLE_STYLE 
    ( 
     subdivision_allowable_style_id NUMBER  NOT NULL , 
     subdivision_id NUMBER  NOT NULL , 
     style_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE SUBDIVISION_ALLOWABLE_STYLE 
    ADD CONSTRAINT Subdivision_Allowable_Style PRIMARY KEY ( subdivision_allowable_style_id ) ;



CREATE TABLE TASK 
    ( 
     task_id NUMBER  NOT NULL , 
     name VARCHAR2 (50)  NOT NULL , 
     description VARCHAR2 (250) , 
     selected_stage_option_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE TASK 
    ADD CONSTRAINT Task_PK PRIMARY KEY ( task_id ) ;



CREATE TABLE TASK_UPDATE 
    ( 
     task_update_id NUMBER  NOT NULL , 
     update_date DATE  NOT NULL , 
     percent_complete NUMBER (5,2)  NOT NULL , 
     comments VARCHAR2 (250)  NOT NULL , 
     photo BLOB , 
     employee_id NUMBER  NOT NULL , 
     task_id NUMBER  NOT NULL 
    ) 
;



ALTER TABLE TASK_UPDATE 
    ADD CONSTRAINT Task_Update_PK PRIMARY KEY ( task_update_id ) ;




ALTER TABLE CUSTOMER_CONTRACT 
    ADD CONSTRAINT CC_contract_id_FK FOREIGN KEY 
    ( 
     contract_id
    ) 
    REFERENCES CONTRACT 
    ( 
     contract_id
    ) 
;


ALTER TABLE CUSTOMER_CONTRACT 
    ADD CONSTRAINT CC_customer_id_FK FOREIGN KEY 
    ( 
     customer_id
    ) 
    REFERENCES CUSTOMER 
    ( 
     customer_id
    ) 
;


ALTER TABLE CONTRACT 
    ADD CONSTRAINT CONTRACT_disclosure_form_id_FK FOREIGN KEY 
    ( 
     disclosure_form_id
    ) 
    REFERENCES DISCLOSURE_FORM 
    ( 
     disclosure_form_id
    ) 
;


ALTER TABLE CONTRACT 
    ADD CONSTRAINT CONTRACT_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
;


ALTER TABLE CONSTRUCTION_PROJECT_STAGE 
    ADD CONSTRAINT CPS_construction_project_id_FK FOREIGN KEY 
    ( 
     construction_project_id
    ) 
    REFERENCES CONSTRUCTION_PROJECT 
    ( 
     construction_project_id
    ) 
;


ALTER TABLE CONSTRUCTION_PROJECT_STAGE 
    ADD CONSTRAINT CPS_stage_id_FK FOREIGN KEY 
    ( 
     stage_id
    ) 
    REFERENCES STAGE 
    ( 
     stage_id
    ) 
;


ALTER TABLE CONSTRUCTION_PROJECT 
    ADD CONSTRAINT CP_crew_id_FK FOREIGN KEY 
    ( 
     crew_id
    ) 
    REFERENCES CREW 
    ( 
     crew_id
    ) 
;


ALTER TABLE CONSTRUCTION_PROJECT 
    ADD CONSTRAINT CP_employee_id_FK FOREIGN KEY 
    ( 
     project_manager_employee_id
    ) 
    REFERENCES PROJECT_MANAGER 
    ( 
     employee_id
    ) 
;


ALTER TABLE CONSTRUCTION_PROJECT 
    ADD CONSTRAINT CP_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
    ON DELETE CASCADE 
;


ALTER TABLE CREW 
    ADD CONSTRAINT CREW_employee_id_FK FOREIGN KEY 
    ( 
     crew_manager_employee_id
    ) 
    REFERENCES CREW_MANAGER 
    ( 
     employee_id
    ) 
;


ALTER TABLE CUSTOMER 
    ADD CONSTRAINT CUSTOMER_app_user_id_FK FOREIGN KEY 
    ( 
     app_user_id
    ) 
    REFERENCES APPLICATION_USER 
    ( 
     app_user_id
    ) 
;


ALTER TABLE CONSTRUCTION_WORKER_CREW 
    ADD CONSTRAINT CWC_crew_id_FK FOREIGN KEY 
    ( 
     crew_id
    ) 
    REFERENCES CREW 
    ( 
     crew_id
    ) 
;


ALTER TABLE CONSTRUCTION_WORKER_CREW 
    ADD CONSTRAINT CWC_employee_id_FK FOREIGN KEY 
    ( 
     constr_worker_employee_id
    ) 
    REFERENCES CONSTRUCTION_WORKER 
    ( 
     employee_id
    ) 
;


ALTER TABLE CONTRACT 
    ADD CONSTRAINT C_subdivision_agreement_id_FK FOREIGN KEY 
    ( 
     subdivision_agreement_id
    ) 
    REFERENCES SUBDIVISION_AGREEMENT 
    ( 
     subdivision_agreement_id
    ) 
;


ALTER TABLE EMPLOYEE 
    ADD CONSTRAINT EMPLOYEE_app_user_id_FK FOREIGN KEY 
    ( 
     app_user_id
    ) 
    REFERENCES APPLICATION_USER 
    ( 
     app_user_id
    ) 
;


ALTER TABLE PROJECT_MANAGER 
    ADD CONSTRAINT FK_ASS_309 FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES EMPLOYEE 
    ( 
     employee_id
    ) 
;


ALTER TABLE CREW_MANAGER 
    ADD CONSTRAINT FK_ASS_310 FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES EMPLOYEE 
    ( 
     employee_id
    ) 
;


ALTER TABLE CONSTRUCTION_WORKER 
    ADD CONSTRAINT FK_ASS_311 FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES EMPLOYEE 
    ( 
     employee_id
    ) 
;


ALTER TABLE SALES_AGENT 
    ADD CONSTRAINT FK_ASS_312 FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES EMPLOYEE 
    ( 
     employee_id
    ) 
;


ALTER TABLE FLOOR 
    ADD CONSTRAINT FLOOR_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
;


ALTER TABLE HOUSE_LAYOUT 
    ADD CONSTRAINT HL_house_layout_id_FK FOREIGN KEY 
    ( 
     house_reverse_layout_id
    ) 
    REFERENCES HOUSE_LAYOUT 
    ( 
     house_layout_id
    ) 
;


ALTER TABLE HOUSE_SALES_AGENT 
    ADD CONSTRAINT HOUSE_SALES_AGENT_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
;


ALTER TABLE HOUSE 
    ADD CONSTRAINT HOUSE_house_layout_id_FK FOREIGN KEY 
    ( 
     house_layout_id
    ) 
    REFERENCES HOUSE_LAYOUT 
    ( 
     house_layout_id
    ) 
;


ALTER TABLE HOUSE_SALES_AGENT 
    ADD CONSTRAINT HSA_employee_id_FK FOREIGN KEY 
    ( 
     sales_agent_employee_id
    ) 
    REFERENCES SALES_AGENT 
    ( 
     employee_id
    ) 
;


ALTER TABLE LOT 
    ADD CONSTRAINT LOT_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
;


ALTER TABLE LOT 
    ADD CONSTRAINT LOT_style_elevation_id_FK FOREIGN KEY 
    ( 
     style_elevation_id
    ) 
    REFERENCES STYLE_ELEVATION 
    ( 
     style_elevation_id
    ) 
;


ALTER TABLE LOT 
    ADD CONSTRAINT LOT_subdivision_id_FK FOREIGN KEY 
    ( 
     subdivision_id
    ) 
    REFERENCES SUBDIVISION 
    ( 
     subdivision_id
    ) 
;


ALTER TABLE OPTION_CHOICE 
    ADD CONSTRAINT OPTION_CHOICE_stage_id_FK FOREIGN KEY 
    ( 
     last_allowed_stage_id
    ) 
    REFERENCES STAGE 
    ( 
     stage_id
    ) 
;


ALTER TABLE ROOM_ON_A_FLOOR 
    ADD CONSTRAINT ROOM_ON_A_FLOOR_floor_id_FK FOREIGN KEY 
    ( 
     floor_id
    ) 
    REFERENCES FLOOR 
    ( 
     floor_id
    ) 
;


ALTER TABLE ROOM_ON_A_FLOOR 
    ADD CONSTRAINT ROOM_ON_A_FLOOR_room_id_FK FOREIGN KEY 
    ( 
     room_id
    ) 
    REFERENCES ROOM 
    ( 
     room_id
    ) 
;


ALTER TABLE SALE 
    ADD CONSTRAINT SALE_employee_id_FK FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES SALES_AGENT 
    ( 
     employee_id
    ) 
;


ALTER TABLE SALE 
    ADD CONSTRAINT SALE_house_id_FK FOREIGN KEY 
    ( 
     house_id
    ) 
    REFERENCES HOUSE 
    ( 
     house_id
    ) 
;


ALTER TABLE SUBDIVISION_ALLOWABLE_STYLE 
    ADD CONSTRAINT SAS_style_id_FK FOREIGN KEY 
    ( 
     style_id
    ) 
    REFERENCES STYLE 
    ( 
     style_id
    ) 
;


ALTER TABLE SUBDIVISION_ALLOWABLE_STYLE 
    ADD CONSTRAINT SAS_subdivision_id_FK FOREIGN KEY 
    ( 
     subdivision_id
    ) 
    REFERENCES SUBDIVISION 
    ( 
     subdivision_id
    ) 
;


ALTER TABLE SUBDIVISION_AGREEMENT 
    ADD CONSTRAINT SA_subdivision_id_FK FOREIGN KEY 
    ( 
     subdivision_id
    ) 
    REFERENCES SUBDIVISION 
    ( 
     subdivision_id
    ) 
;


ALTER TABLE SCHOOL 
    ADD CONSTRAINT SCHOOL_school_district_id_FK FOREIGN KEY 
    ( 
     school_district_id
    ) 
    REFERENCES SCHOOL_DISTRICT 
    ( 
     school_district_id
    ) 
;


ALTER TABLE STYLE_ELEVATION 
    ADD CONSTRAINT SE_elevation_id_FK FOREIGN KEY 
    ( 
     elevation_id
    ) 
    REFERENCES ELEVATION 
    ( 
     elevation_id
    ) 
;


ALTER TABLE SELECTED_STAGE_OPTION 
    ADD CONSTRAINT SSO_cnstr_project_stage_id_FK FOREIGN KEY 
    ( 
     construction_project_stage_id
    ) 
    REFERENCES CONSTRUCTION_PROJECT_STAGE 
    ( 
     construction_project_stage_id
    ) 
;


ALTER TABLE SELECTED_STAGE_OPTION 
    ADD CONSTRAINT SSO_option_choice_id_FK FOREIGN KEY 
    ( 
     option_choice_id
    ) 
    REFERENCES OPTION_CHOICE 
    ( 
     option_choice_id
    ) 
;


ALTER TABLE STYLE_ELEVATION 
    ADD CONSTRAINT STYLE_ELEVATION_style_id_FK FOREIGN KEY 
    ( 
     style_id
    ) 
    REFERENCES STYLE 
    ( 
     style_id
    ) 
;


ALTER TABLE SUBDIVISION 
    ADD CONSTRAINT S_school_district_id_FK FOREIGN KEY 
    ( 
     school_district_id
    ) 
    REFERENCES SCHOOL_DISTRICT 
    ( 
     school_district_id
    ) 
;


ALTER TABLE TASK_UPDATE 
    ADD CONSTRAINT TASK_UPDATE_employee_id_FK FOREIGN KEY 
    ( 
     employee_id
    ) 
    REFERENCES PROJECT_MANAGER 
    ( 
     employee_id
    ) 
;


ALTER TABLE TASK_UPDATE 
    ADD CONSTRAINT TASK_UPDATE_task_id_FK FOREIGN KEY 
    ( 
     task_id
    ) 
    REFERENCES TASK 
    ( 
     task_id
    ) 
;


ALTER TABLE TASK 
    ADD CONSTRAINT T_selected_stage_option_id_FK FOREIGN KEY 
    ( 
     selected_stage_option_id
    ) 
    REFERENCES SELECTED_STAGE_OPTION 
    ( 
     selected_stage_option_id
    ) 
;


/*Table created for JOB*/
CREATE TABLE CONSTRUCTION_END_TODAY 
( 
  construction_project_id NUMBER  NOT NULL , 
  start_date DATE  NOT NULL , 
  end_date DATE , 
  project_manager_employee_id NUMBER  NOT NULL , 
  crew_id NUMBER , 
  house_id NUMBER  NOT NULL 
);

--Views
DROP VIEW view_unfinished_houses;
DROP VIEW view_emptylot;

--1. Customer information of all the unfinished houses
--Assume that if the construction is not finished, the end_date is NULL.
CREATE OR REPLACE VIEW view_unfinished_houses AS
	SELECT h.house_id, con.contract_id, c.customer_id, 
				 c.first_name AS FN, c.last_name AS LN, c.phone_number AS PhoneNo,
				 cp.estimated_end_date AS Estimated_End_Date
	FROM construction_project cp
	LEFT JOIN house h on h.house_id = cp.house_id
	LEFT JOIN contract con on cp.house_id = con.house_id
	LEFT JOIN customer_contract cc on con.contract_id = cc.contract_id
	LEFT JOIN Customer c on cc.customer_id = c.customer_id
	WHERE cp.end_date is NULL
	AND con.is_terminated like 'N';

--2. All empty lot
--Assume that if a lot is empty then there is no house_id assigned to the lot.
CREATE OR REPLACE VIEW view_emptylot AS
	SELECT l.lot_id, l.latitude, l.longitude, l.subdivision_id, s.name
	FROM Lot l
	LEFT JOIN Subdivision s on l.subdivision_id = s.subdivision_id
	WHERE house_id is NULL;


--Add the Sequences
--Drop the Sequences
drop SEQUENCE APPLICATION_USER_seq;
drop SEQUENCE CONSTRUCTION_PROJECT_STAGE_seq;
drop SEQUENCE CONSTRUCTION_WORKER_CREW_seq;
drop SEQUENCE CONTRACT_seq;
drop SEQUENCE CONSTRUCTION_PROJECT_seq;
drop SEQUENCE CREW_seq;
drop SEQUENCE CUSTOMER_seq;
drop SEQUENCE CUSTOMER_CONTRACT_seq;
drop SEQUENCE DISCLOSURE_FORM_seq;
drop SEQUENCE ELEVATION_seq;
drop SEQUENCE EMPLOYEE_seq;
drop SEQUENCE FLOOR_seq;
drop SEQUENCE HOUSE_seq;
drop SEQUENCE HOUSE_LAYOUT_seq;
drop SEQUENCE HOUSE_SALES_AGENT_seq;
drop SEQUENCE LOT_seq;
drop SEQUENCE OPTION_CHOICE_seq;
drop SEQUENCE ROOM_seq;
drop SEQUENCE ROOM_ON_A_FLOOR_seq;
drop SEQUENCE SALE_seq;
drop SEQUENCE SCHOOL_seq;
drop SEQUENCE SCHOOL_DISTRICT_seq;
drop SEQUENCE SELECTED_STAGE_OPTION_seq;
drop SEQUENCE STAGE_seq;
drop SEQUENCE STYLE_seq;
drop SEQUENCE STYLE_ELEVATION_seq;
drop SEQUENCE SUBDIVISION_seq;
drop SEQUENCE SUBDIVISION_AGREEMENT_seq;
drop SEQUENCE SUBDIV_ALLOWABLE_STYLE_seq;
drop SEQUENCE TASK_UPDATE_seq;
drop SEQUENCE TASK_seq;

--Create the Sequences
CREATE SEQUENCE APPLICATION_USER_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t1 
BEFORE INSERT ON APPLICATION_USER
FOR EACH ROW
WHEN (NEW.APP_USER_id IS NULL) 
BEGIN
  :NEW.APP_USER_id := APPLICATION_USER_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CONSTRUCTION_PROJECT_STAGE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t2
BEFORE INSERT ON CONSTRUCTION_PROJECT_STAGE
FOR EACH ROW
WHEN (NEW.CONSTRUCTION_PROJECT_STAGE_id IS NULL) 
BEGIN
  :NEW.CONSTRUCTION_PROJECT_STAGE_id := CONSTRUCTION_PROJECT_STAGE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CONSTRUCTION_WORKER_CREW_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t3
BEFORE INSERT ON CONSTRUCTION_WORKER_CREW
FOR EACH ROW
WHEN (NEW.CONSTRUCTION_WORKER_CREW_id IS NULL) 
BEGIN
  :NEW.CONSTRUCTION_WORKER_CREW_id := CONSTRUCTION_WORKER_CREW_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CONTRACT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t4
BEFORE INSERT ON CONTRACT
FOR EACH ROW
WHEN (NEW.CONTRACT_id IS NULL) 
BEGIN
  :NEW.CONTRACT_id := CONTRACT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CONSTRUCTION_PROJECT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t5
BEFORE INSERT ON CONSTRUCTION_PROJECT
FOR EACH ROW
WHEN (NEW.CONSTRUCTION_PROJECT_id IS NULL) 
BEGIN
  :NEW.CONSTRUCTION_PROJECT_id := CONSTRUCTION_PROJECT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CREW_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t6
BEFORE INSERT ON CREW
FOR EACH ROW
WHEN (NEW.CREW_id IS NULL) 
BEGIN
  :NEW.CREW_id := CREW_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CUSTOMER_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t8
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
WHEN (NEW.CUSTOMER_id IS NULL) 
BEGIN
  :NEW.CUSTOMER_id := CUSTOMER_seq.NEXTVAL;
END;
/



CREATE SEQUENCE CUSTOMER_CONTRACT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t9
BEFORE INSERT ON CUSTOMER_CONTRACT
FOR EACH ROW
WHEN (NEW.CUSTOMER_CONTRACT_id IS NULL) 
BEGIN
  :NEW.CUSTOMER_CONTRACT_id := CUSTOMER_CONTRACT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE DISCLOSURE_FORM_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t10
BEFORE INSERT ON DISCLOSURE_FORM
FOR EACH ROW
WHEN (NEW.DISCLOSURE_FORM_id IS NULL) 
BEGIN
  :NEW.DISCLOSURE_FORM_id := DISCLOSURE_FORM_seq.NEXTVAL;
END;
/



CREATE SEQUENCE ELEVATION_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t11
BEFORE INSERT ON ELEVATION
FOR EACH ROW
WHEN (NEW.ELEVATION_id IS NULL) 
BEGIN
  :NEW.ELEVATION_id := ELEVATION_seq.NEXTVAL;
END;
/



CREATE SEQUENCE EMPLOYEE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t12
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
WHEN (NEW.EMPLOYEE_id IS NULL) 
BEGIN
  :NEW.EMPLOYEE_id := EMPLOYEE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE FLOOR_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t13
BEFORE INSERT ON FLOOR
FOR EACH ROW
WHEN (NEW.FLOOR_id IS NULL) 
BEGIN
  :NEW.FLOOR_id := FLOOR_seq.NEXTVAL;
END;
/



CREATE SEQUENCE HOUSE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t14
BEFORE INSERT ON HOUSE
FOR EACH ROW
WHEN (NEW.HOUSE_id IS NULL) 
BEGIN
  :NEW.HOUSE_id := HOUSE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE HOUSE_LAYOUT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t15
BEFORE INSERT ON HOUSE_LAYOUT
FOR EACH ROW
WHEN (NEW.HOUSE_LAYOUT_id IS NULL) 
BEGIN
  :NEW.HOUSE_LAYOUT_id := HOUSE_LAYOUT_seq.NEXTVAL;
END;
/




CREATE SEQUENCE HOUSE_SALES_AGENT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t16
BEFORE INSERT ON HOUSE_SALES_AGENT
FOR EACH ROW
WHEN (NEW.HOUSE_SALES_AGENT_id IS NULL) 
BEGIN
  :NEW.HOUSE_SALES_AGENT_id := HOUSE_SALES_AGENT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE LOT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t17
BEFORE INSERT ON LOT
FOR EACH ROW
WHEN (NEW.LOT_id IS NULL) 
BEGIN
  :NEW.LOT_id := LOT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE OPTION_CHOICE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t18
BEFORE INSERT ON OPTION_CHOICE
FOR EACH ROW
WHEN (NEW.OPTION_CHOICE_id IS NULL) 
BEGIN
  :NEW.OPTION_CHOICE_id := OPTION_CHOICE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE ROOM_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t20
BEFORE INSERT ON ROOM
FOR EACH ROW
WHEN (NEW.ROOM_id IS NULL) 
BEGIN
  :NEW.ROOM_id := ROOM_seq.NEXTVAL;
END;
/



CREATE SEQUENCE ROOM_ON_A_FLOOR_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t21
BEFORE INSERT ON ROOM_ON_A_FLOOR
FOR EACH ROW
WHEN (NEW.ROOM_ON_A_FLOOR_id IS NULL) 
BEGIN
  :NEW.ROOM_ON_A_FLOOR_id := ROOM_ON_A_FLOOR_seq.NEXTVAL;
END;
/




CREATE SEQUENCE SALE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t22
BEFORE INSERT ON SALE
FOR EACH ROW
WHEN (NEW.SALE_id IS NULL) 
BEGIN
  :NEW.SALE_id := SALE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE SCHOOL_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t24
BEFORE INSERT ON SCHOOL
FOR EACH ROW
WHEN (NEW.SCHOOL_id IS NULL) 
BEGIN
  :NEW.SCHOOL_id := SCHOOL_seq.NEXTVAL;
END;
/



CREATE SEQUENCE SCHOOL_DISTRICT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t25
BEFORE INSERT ON SCHOOL_DISTRICT
FOR EACH ROW
WHEN (NEW.SCHOOL_DISTRICT_id IS NULL) 
BEGIN
  :NEW.SCHOOL_DISTRICT_id := SCHOOL_DISTRICT_seq.NEXTVAL;
END;
/




CREATE SEQUENCE SELECTED_STAGE_OPTION_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t26
BEFORE INSERT ON SELECTED_STAGE_OPTION
FOR EACH ROW
WHEN (NEW.SELECTED_STAGE_OPTION_id IS NULL) 
BEGIN
  :NEW.SELECTED_STAGE_OPTION_id := SELECTED_STAGE_OPTION_seq.NEXTVAL;
END;
/



CREATE SEQUENCE STAGE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t27
BEFORE INSERT ON STAGE
FOR EACH ROW
WHEN (NEW.STAGE_id IS NULL) 
BEGIN
  :NEW.STAGE_id := STAGE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE STYLE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t28
BEFORE INSERT ON STYLE
FOR EACH ROW
WHEN (NEW.STYLE_id IS NULL) 
BEGIN
  :NEW.STYLE_id := STYLE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE STYLE_ELEVATION_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t29
BEFORE INSERT ON STYLE_ELEVATION
FOR EACH ROW
WHEN (NEW.STYLE_ELEVATION_id IS NULL) 
BEGIN
  :NEW.STYLE_ELEVATION_id := STYLE_ELEVATION_seq.NEXTVAL;
END;
/



CREATE SEQUENCE SUBDIVISION_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t30
BEFORE INSERT ON SUBDIVISION
FOR EACH ROW
WHEN (NEW.SUBDIVISION_id IS NULL) 
BEGIN
  :NEW.SUBDIVISION_id := SUBDIVISION_seq.NEXTVAL;
END;
/




CREATE SEQUENCE SUBDIVISION_AGREEMENT_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t31
BEFORE INSERT ON SUBDIVISION_AGREEMENT
FOR EACH ROW
WHEN (NEW.SUBDIVISION_AGREEMENT_id IS NULL) 
BEGIN
  :NEW.SUBDIVISION_AGREEMENT_id := SUBDIVISION_AGREEMENT_seq.NEXTVAL;
END;
/



CREATE SEQUENCE SUBDIV_ALLOWABLE_STYLE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t32
BEFORE INSERT ON SUBDIVISION_ALLOWABLE_STYLE
FOR EACH ROW
WHEN (NEW.SUBDIVISION_ALLOWABLE_STYLE_id IS NULL) 
BEGIN
  :NEW.SUBDIVISION_ALLOWABLE_STYLE_id := SUBDIV_ALLOWABLE_STYLE_seq.NEXTVAL;
END;
/



CREATE SEQUENCE TASK_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t33
BEFORE INSERT ON TASK
FOR EACH ROW
WHEN (NEW.TASK_id IS NULL) 
BEGIN
  :NEW.TASK_id := TASK_seq.NEXTVAL;
END;
/



CREATE SEQUENCE TASK_UPDATE_seq INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER seq_t34
BEFORE INSERT ON TASK_UPDATE
FOR EACH ROW
WHEN (NEW.TASK_UPDATE_id IS NULL) 
BEGIN
  :NEW.TASK_UPDATE_id := TASK_UPDATE_seq.NEXTVAL;
END;
/

--Create option-related triggers

CREATE OR REPLACE TRIGGER selected_stage_option_check
BEFORE INSERT OR UPDATE ON selected_stage_option
FOR EACH ROW
DECLARE
	constructionstage construction_project_stage.stage_id%TYPE;
	lastallowed option_choice.last_allowed_stage_id%TYPE;
	e_optionstage_above_threshold EXCEPTION;
	e_optionstage_below_threshold EXCEPTION;
BEGIN
	SELECT stage_id INTO constructionstage FROM construction_project_stage
		WHERE construction_project_stage_id = :NEW.construction_project_stage_id;

	SELECT last_allowed_stage_id INTO lastallowed FROM option_choice
		WHERE option_choice_id = :NEW.option_choice_id;

	IF (constructionstage = lastallowed) THEN NULL; --Valid. Ignore. 
	ELSIF (constructionstage < lastallowed) THEN	
		RAISE e_optionstage_above_threshold;
	ELSIF (constructionstage - 1) = lastallowed THEN NULL; -- Valid. Ignore. 
	ELSIF (constructionstage - 1) > lastallowed THEN
		RAISE e_optionstage_below_threshold;
	ELSE
		NULL;
	END IF;
EXCEPTION
	WHEN e_optionstage_above_threshold THEN
		raise_application_error(-20000, 'Option is beyond current construction project stage.');
	WHEN e_optionstage_below_threshold THEN
		raise_application_error(-20000, 'Option is too far below current construction project stage.');
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('No house exists for this selection.');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('The PLSQL procedure executed by ' || USER || ' returned an unhandled exception on ' 
		|| SYSDATE || '.');
		DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM || '.');
END;
/

CREATE OR REPLACE TRIGGER stage_selected_option_markup
BEFORE INSERT OR UPDATE ON selected_stage_option
FOR EACH ROW
FOLLOWS selected_stage_option_check
DECLARE
	constructionstage construction_project_stage.stage_id%TYPE;
	lastallowed option_choice.last_allowed_stage_id%TYPE;
	optionprice option_choice.price%TYPE;
BEGIN
	SELECT stage_id INTO constructionstage FROM construction_project_stage
		WHERE construction_project_stage_id = :NEW.construction_project_stage_id;

	SELECT last_allowed_stage_id INTO lastallowed FROM option_choice
		WHERE option_choice_id = :NEW.option_choice_id;
		
	SELECT price INTO optionprice FROM option_choice
		WHERE option_choice_id = :NEW.option_choice_id;

	IF (constructionstage - 1) = lastallowed THEN
		:NEW.customer_price := optionprice + (optionprice * 0.15);
	ELSE
		:NEW.customer_price := optionprice;	
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('No house exists for this selection.');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('The PLSQL procedure executed by ' || USER || ' returned an unhandled exception on ' 
		|| SYSDATE || '.');
		DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM || '.');
END;
/


--Insert dummy data
delete from School_district;
insert into School_district(name) values ('Pittsburgh');
insert into School_district(name) values ('Cranberry');
insert into School_district(name) values ('Harrisburg');
insert into School_district(name) values ('Milwaukee');
insert into School_district(name) values ('Waukesha');

delete from school;
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Pittsburgh'), 'Rufus King High School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Milwaukee'), 'Congress Elementary');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Harrisburg'), 'Lincoln High School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Pittsburgh'), 'Washington West Middle School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Harrisburg'), 'Rufus King High School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Waukesha'), 'Lincoln Elementary School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Pittsburgh'), 'Obama Middle School');
insert into School(school_district_id, name) values ((select school_district_id from School_district where name like 'Pittsburgh'), 'St. John Upper School');

delete from subdivision;
insert into subdivision(school_district_id, name, city, state, zipcode) values ((select school_district_id from School_district where name like 'Pittsburgh'), 'The Bluffs', 'Pittsburgh', 'PA', '15217');
insert into subdivision(school_district_id, name, city, state, zipcode) values ((select school_district_id from School_district where name like 'Cranberry'), 'Riverview', 'Cranberry', 'PA', '17897');
insert into subdivision(school_district_id, name, city, state, zipcode) values ((select school_district_id from School_district where name like 'Milwaukee'), 'The Lofts', 'Milwaukee', 'WI', '53208');
insert into subdivision(school_district_id, name, city, state, zipcode) values ((select school_district_id from School_district where name like 'Waukesha'), 'Harrington', 'Waukesha', 'WI', '53222');
insert into subdivision(school_district_id, name, city, state, zipcode) values ((select school_district_id from School_district where name like 'Milwaukee'), 'Cork Factory', 'Pittsburgh', 'PA', '15222');

delete from elevation;
insert into elevation(type, description, additional_cost) values ('A', 'Standard elevation.', 0);
insert into elevation(type, description, additional_cost) values ('B', 'Silver elevation with upgrade from siding to stone.', 6735.50);
insert into elevation(type, description, additional_cost) values ('C', 'Gold elevation with upgrade from siding to store with premium windows and finishes.', 12056.00);

delete from application_user;
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Katarina Shaw', 'password123', 'What is the name of your pet?', 'Charlie', 'katarina@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Lyz Knight', 'Sparkles!?!', 'What is your best friends name from high school?', 'Betsey', 'lyz@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Larry Parker', '00muscles!&', 'What city were you born in?', 'Kansas City', 'larry@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('John Thompson', 'trtetegr', 'What city were you born in?', 'Milwaukee', 'john@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Lea Ligon', 'fyf76vjhh', 'What is the name of your pet?', 'Jingles', 'lea@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Elisa Applegate', 'kljlj865', 'What city were you born in?', 'Houston', 'elisa@email.com');
insert into application_user(username, password, password_recovery_question, password_recovery_answer, email)
    values ('Molly North', 'fedsgds', 'What city were you born in?', 'Portland', 'molly@email.com');

delete from employee;
insert into employee(first_name, last_name, home_phone, street, city, state, zipcode, start_date)
    values ('Carson', 'Peterson', '414-344-6873', '768 Highland Avenue', 'Pittsburgh', 'PA', '15210', TO_DATE('27-OCT-13'));
insert into employee(first_name, last_name, home_phone, street, city, state, zipcode, start_date, app_user_id) 
    values ('Katarina', 'Shaw', '414-324-3815', '5626 Wilkins Avenue', 'Pittsburgh', 'PA', '15217', TO_DATE('27-OCT-00'), (select app_user_id from application_user where username like 'Katarina Shaw'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date, app_user_id) 
    values ('Lyz', 'Knight', '412-545-5443', '412-875-3213', '123 Park Avenue', 'Cranberry', 'PA', '15214', TO_DATE('06-JAN-01'), (select app_user_id from application_user where username like 'Lyz Knight'));
insert into employee(first_name, last_name, home_phone, work_phone, street, city, state, zipcode, start_date, end_date, app_user_id) 
    values ('Larry', 'Parker', '412-875-4323', '412-753-2332', '4562 Hempstead Road', 'Pittsburgh', 'PA', '15214', TO_DATE('12-NOV-12'), TO_DATE('13-FEB-13'), (select app_user_id from application_user where username like 'Larry Parker'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date) 
    values ('Tom', 'Patterson', '412-345-2222', '412-345-1234', '445 Capitol Dr.', 'Cranberry', 'PA', '15214', TO_DATE('06-MAR-11'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date) 
    values ('James', 'Smiley', '412-345-6572', '412-243-3664', '402 Lincoln Dr.', 'Pittsburgh', 'PA', '15214', TO_DATE('14-OCT-03'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date) 
    values ('Elliot', 'Vinn', '412-450-4325', '412-375-6544', '2400 Main St.', 'Pittsburgh', 'PA', '15214', TO_DATE('06-JUN-10'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date, app_user_id) 
    values ('John', 'Thompson', '413-233-5362', '412-341-5434', '600 Capitol Dr.', 'Cranberry', 'PA', '15214', TO_DATE('06-JAN-11'), (select app_user_id from application_user where username like 'John Thompson'));
insert into employee(first_name, last_name, home_phone, cell_phone, street, city, state, zipcode, start_date) 
    values ('Jim', 'Roberts', '412-452-4335', '412-575-6524', '420 Jameston Dr.', 'Milwaukee', 'WI', '15214', TO_DATE('06-JUN-10'));

delete from sales_agent;
insert into sales_agent(title, license_number, employee_id)
    values ('Senior Sales Consultant','897859', (select employee_id from employee where first_name like 'Katarina' and last_name like 'Shaw'));
insert into sales_agent(title, license_number, employee_id)
    values ('Partner Sales Consultant','545354', (select employee_id from employee where first_name like 'Lyz' and last_name like 'Knight'));

delete from construction_worker;
insert into construction_worker(employee_id, skill_one, skill_two)
    values ((select employee_id from employee where first_name like 'Carson' and last_name like 'Peterson'), 'Plumbing', 'Electricity');
insert into construction_worker(employee_id, skill_one, skill_two)
    values ((select employee_id from employee where first_name like 'Larry' and last_name like 'Parker'), 'Masonry', 'Plumbing');
insert into construction_worker(employee_id, skill_one)
    values ((select employee_id from employee where first_name like 'Tom' and last_name like 'Patterson'), 'Masonry');
insert into construction_worker(employee_id, skill_one)
    values ((select employee_id from employee where first_name like 'James' and last_name like 'Smiley'), 'Masonry');
insert into construction_worker(employee_id, skill_one, skill_two, skill_three)
    values ((select employee_id from employee where first_name like 'Elliot' and last_name like 'Vinn'), 'Plumbing', 'Electricity', 'Masonry');
insert into construction_worker(employee_id, skill_one)
    values ((select employee_id from employee where first_name like 'John' and last_name like 'Thompson'), 'Masonry');
insert into construction_worker(employee_id, skill_one)
    values ((select employee_id from employee where first_name like 'Jim' and last_name like 'Roberts'), 'Plumbing');

delete from crew_manager;
insert into crew_manager(start_date, employee_id)
    values (TO_DATE('14-OCT-03'), (select employee_id from employee where first_name like 'James' and last_name like 'Smiley'));
insert into crew_manager(start_date, employee_id)
    values (TO_DATE('06-JUN-10'), (select employee_id from employee where first_name like 'Jim' and last_name like 'Roberts'));

delete from crew;
insert into crew(crew_manager_employee_id)
    values ((select employee_id from employee where first_name like 'James' and last_name like 'Smiley'));
insert into crew(crew_manager_employee_id)
    values ((select employee_id from employee where first_name like 'Jim' and last_name like 'Roberts'));

delete from construction_worker_crew;
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('27-OCT-13'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'Jim' and e.last_name like 'Roberts'),
    (select e.employee_id from employee e where e.first_name like 'Carson' and e.last_name like 'Peterson' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('02-JAN-13'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'Jim' and e.last_name like 'Roberts'),
    (select e.employee_id from employee e where e.first_name like 'Jim' and e.last_name like 'Roberts' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('12-NOV-12'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'James' and e.last_name like 'Smiley'),
    (select e.employee_id from employee e where e.first_name like 'Larry' and e.last_name like 'Parker' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('12-NOV-12'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'James' and e.last_name like 'Smiley'),
    (select e.employee_id from employee e where e.first_name like 'Tom' and e.last_name like 'Patterson' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('12-NOV-12'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'James' and e.last_name like 'Smiley'),
    (select e.employee_id from employee e where e.first_name like 'James' and e.last_name like 'Smiley' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('12-NOV-12'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'James' and e.last_name like 'Smiley'),
    (select e.employee_id from employee e where e.first_name like 'Elliot' and e.last_name like 'Vinn' ));
insert into construction_worker_crew(start_date, crew_id, constr_worker_employee_id)
    values (TO_DATE('12-NOV-12'), (select c.crew_id from crew c, construction_worker cw, employee e where c.crew_manager_employee_id = cw.employee_id and cw.employee_id = e.employee_id and e.first_name like 'James' and e.last_name like 'Smiley'),
    (select e.employee_id from employee e where e.first_name like 'John' and e.last_name like 'Thompson' ));

delete from subdivision_agreement;
insert into subdivision_agreement(start_date, description, subdivision_id)
    values (TO_DATE('12-NOV-12'), 'Subdivision agreement last modified on November 12, 2012 for the Bluffs', (select subdivision_id from subdivision where name like 'The Bluffs') );
insert into subdivision_agreement(start_date, end_date, description, subdivision_id)
    values (TO_DATE('01-JUN-11'), TO_DATE('12-NOV-12'), 'Created June 1, 2011 for The Bluffs', (select subdivision_id from subdivision where name like 'The Bluffs') );
insert into subdivision_agreement(start_date, description, subdivision_id)
    values (TO_DATE('12-JUN-12'), 'Agreement for Riverview', (select subdivision_id from subdivision where name like 'Riverview') );
insert into subdivision_agreement(start_date, description, subdivision_id)
    values (TO_DATE('14-OCT-13'), 'Updated October 2013', (select subdivision_id from subdivision where name like 'The Lofts') );
insert into subdivision_agreement(start_date, subdivision_id)
    values (TO_DATE('10-NOV-13'), (select subdivision_id from subdivision where name like 'Harrington') );
insert into subdivision_agreement(start_date, description, subdivision_id)
    values (TO_DATE('09-JAN-11'), 'Subdivision agreement last modified on January', (select subdivision_id from subdivision where name like 'Cork Factory') );
insert into subdivision_agreement(start_date, subdivision_id)
    values (TO_DATE('19-AUG-12'), (select subdivision_id from subdivision where name like 'Cork Factory') );

delete from lot;
insert into lot(premium, street, subdivision_id)
    values (41356.78, '134 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (31356.00, '136 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (36466.78, '138 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (41356.78, '135 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (31356.00, '137 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (36466.78, '139 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));

insert into lot(premium, street, subdivision_id)
    values (41356.78, '134 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (31356.00, '136 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (36466.78, '138 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (41356.78, '135 Weston Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (31356.00, '137 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));
insert into lot(premium, street, subdivision_id)
    values (36466.78, '139 Walborn Street', (select subdivision_id from subdivision where name like 'Cork Factory'));

insert into lot(premium, street, subdivision_id)
    values (13000.00, '4556 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));
insert into lot(premium, street, subdivision_id)
    values (12000.00, '4555 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '4554 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));
insert into lot(premium, street, subdivision_id)
    values (12300.00, '4553 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));
insert into lot(premium, street, subdivision_id)
    values (11500.00, '4552 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));
insert into lot(premium, street, subdivision_id)
    values (12350.00, '4551 Charleston Street', (select subdivision_id from subdivision where name like 'The Bluffs'));

insert into lot(premium, street, subdivision_id)
    values (13000.00, '121 W. North Street', (select subdivision_id from subdivision where name like 'Riverview'));
insert into lot(premium, street, subdivision_id)
    values (12000.00, '122 W. North Street', (select subdivision_id from subdivision where name like 'Riverview'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '123 W. North Street', (select subdivision_id from subdivision where name like 'Riverview'));

insert into lot(premium, street, subdivision_id)
    values (13000.00, '134 Water Ave.', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (13000.00, '135 Water Ave.', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (13000.00, '136 Water Ave.', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (13000.00, '137 Water Ave.', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '235 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '234 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '236 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '233 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '232 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));
insert into lot(premium, street, subdivision_id)
    values (10000.00, '237 Westminster Street', (select subdivision_id from subdivision where name like 'The Lofts'));

delete from Style;
insert into style(name, base_price)
    values ('Craftsman', 89000.00);
insert into style(name, base_price)
    values ('Victorian', 100000.00);
insert into style(name, base_price)
    values ('Bungalow', 99000.00);
insert into style(name, base_price)
    values ('Queen Anne', 120000.00);
insert into style(name, base_price)
    values ('Split-level', 79000.00);

delete from elevation;
insert into elevation(type, description, additional_cost)
    values ('A', 'This is the standard.', 0.00);
insert into elevation(type, additional_cost)
    values ('B', 4000.00);
insert into elevation(type, description, additional_cost)
    values ('C', 'This is the platinum level with the best available materials.', 8000.00);

delete from style_elevation;
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Craftsman'),(select elevation_id from elevation where type like 'A'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Craftsman'),(select elevation_id from elevation where type like 'B'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Craftsman'),(select elevation_id from elevation where type like 'C'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Victorian'),(select elevation_id from elevation where type like 'A'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Victorian'),(select elevation_id from elevation where type like 'B'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Bungalow'),(select elevation_id from elevation where type like 'A'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Bungalow'),(select elevation_id from elevation where type like 'C'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Queen Anne'),(select elevation_id from elevation where type like 'A'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Queen Anne'),(select elevation_id from elevation where type like 'C'));
insert into style_elevation(style_id, elevation_id)
    values ((select style_id from style where name like 'Split-level'),(select elevation_id from elevation where type like 'A'));

delete from subdivision_allowable_style;
insert into subdivision_allowable_style(subdivision_id, style_id)
    values ((select subdivision_id from subdivision where name like 'The Bluffs'),(select style_id from style where name like 'Victorian'));
insert into subdivision_allowable_style(subdivision_id, style_id)
    values ((select subdivision_id from subdivision where name like 'Riverview'),(select style_id from style where name like 'Craftsman'));
insert into subdivision_allowable_style(subdivision_id, style_id)
    values ((select subdivision_id from subdivision where name like 'The Lofts'),(select style_id from style where name like 'Victorian'));
insert into subdivision_allowable_style(subdivision_id, style_id)
    values ((select subdivision_id from subdivision where name like 'Cork Factory'),(select style_id from style where name like 'Bungalow'));
insert into subdivision_allowable_style(subdivision_id, style_id)
    values ((select subdivision_id from subdivision where name like 'Harrington'),(select style_id from style where name like 'Queen Anne'));


delete from house_layout;
insert into house_layout(name, description)
    values ('Five bedroom, Garage', 'Five bedrooms with the master on the main floor. An attached garage.');
insert into house_layout(name, description)
    values ('Three bedroom upstairs', 'Three bedrooms with all bedrooms on the top floors.');

delete from house;
insert into house(escrow_amount, is_reversed, financing_info, house_layout_id)
    values (67885.60, 'N', 'Financing from US Bank', (select house_layout_id from house_layout where name like 'Five bedroom, Garage'));

update lot
    set house_id = (select house_id from house where financing_info like 'Financing from US Bank')
    where street like '121 W. North Street';

delete from room;
insert into room(room_type, ceiling_type, description)
    values ('Foyer', 'tall cathedral', 'An option for a tall entranceway.'); 
insert into room(room_type, ceiling_type, description)
    values ('Living Room', 'vaulted', 'An option for a vaulted livingroom.'); 
insert into room(room_type, description)
    values ('Living Room', 'A standard livingroom.'); 
insert into room(room_type)
    values ('Kitchen');
insert into room(room_type)
    values ('Bathroom');
insert into room(room_type, ceiling_type)
    values ('Attic', 'vaulted');
insert into room(room_type)
    values ('Bedroom');
insert into room(room_type)
    values ('Laundry Room');

delete from customer;
insert into customer(first_name, last_name, phone_number, mortgage_info, app_user_id)
    values ('Elisa', 'Applegate', '412-657-9809', 'PNC Bank owns the mortgage', 
        (select app_user_id from application_user where username like 'Elisa Applegate'));
insert into customer(first_name, last_name, app_user_id)
    values ('Lea', 'Ligon', (select app_user_id from application_user where username like 'Lea Ligon'));

delete from disclosure_form;
insert into disclosure_form(start_date, end_date, description)
    values (TO_DATE('01-JAN-11'), TO_DATE('12-NOV-12'), 'Original Disclosure Form');
insert into disclosure_form(start_date, end_date, description)
    values (TO_DATE('12-NOV-12'), TO_DATE('15-JUN-13'), 'Disclosure form updated with parking information');
insert into disclosure_form(start_date, description)
    values (TO_DATE('15-JUN-13'), 'Disclosure form updated with construction liability');


delete from contract;
insert into contract(submitted_date, time_limit_date, is_terminated, disclosure_form_id, subdivision_agreement_id, house_id)
    values (TO_DATE('05-JUN-13'), TO_DATE('05-JUN-14'), 'N',
    (select disclosure_form_id from disclosure_form where start_date = TO_DATE('15-JUN-13')),
    (select subdivision_agreement_id from subdivision_agreement sa where sa.subdivision_id = (select subdivision_id from subdivision where name like 'Riverview') and end_date is null),
    (select house_id from lot where street like '121 W. North Street'));
insert into contract(submitted_date, time_limit_date, is_terminated, disclosure_form_id, subdivision_agreement_id, house_id)
    values (TO_DATE('05-FEB-11'), TO_DATE('05-FEB-12'), 'Y',
    (select disclosure_form_id from disclosure_form where start_date = TO_DATE('01-JAN-11')),
    (select subdivision_agreement_id from subdivision_agreement sa where sa.subdivision_id = (select subdivision_id from subdivision where name like 'Riverview') and end_date is null),
    (select house_id from lot where street like '121 W. North Street'));

delete from customer_contract;
insert into customer_contract(customer_id, contract_id)
    values ((select customer_id from customer where first_name like 'Elisa' and last_name like 'Applegate'),
    (select contract_id from contract where submitted_date = TO_DATE('05-JUN-13')));
insert into customer_contract(customer_id, contract_id)
    values ((select customer_id from customer where first_name like 'Lea' and last_name like 'Ligon'),
    (select contract_id from contract where submitted_date = TO_DATE('05-FEB-11')));

delete from floor;
insert into floor(description, house_id)
    values ('first floor', (select house_id from lot where street like '121 W. North Street'));
insert into floor(description, house_id)
    values ('basement', (select house_id from lot where street like '121 W. North Street'));
insert into floor(description, house_id)
    values ('second floor', (select house_id from lot where street like '121 W. North Street'));

delete from room_on_a_floor;
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'first floor'), 
    (select room_id from room where room_type like 'Kitchen'), '20X14', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'first floor'), 
    (select room_id from room where room_type like 'Bathroom'), '20X14', 1);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '12X12', 2); 
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '14X12', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '16X16', 5); 
insert into room_on_a_floor(floor_id, room_id)
    values ((select floor_id from floor where house_id = (select house_id from lot where street like '121 W. North Street') and description = 'second floor'),
    (select room_id from room where room_type like 'Bathroom'));


delete from house_sales_agent;
insert into house_sales_agent(start_date, end_date, is_main_sales_agent, sales_agent_employee_id, house_id)
    values (TO_DATE('01-JAN-11'), TO_DATE('05-MAR-11'), 'N', 
        (select employee_id from sales_agent where license_number like '897859'),
        (select house_id from lot where street like '121 W. North Street'));
insert into house_sales_agent(start_date, is_main_sales_agent, sales_agent_employee_id, house_id)
    values (TO_DATE('01-DEC-12'), 'Y', 
        (select employee_id from sales_agent where license_number like '545354'),
        (select house_id from lot where street like '121 W. North Street'));


delete from project_manager;
insert into project_manager(employee_id, start_date)
    values ((select employee_id from employee where first_name like 'Jim' and last_name like 'Roberts'), TO_DATE('10-NOV-10'));


delete from sale;
insert into sale(escrow_paid, financing_option, house_id, employee_id)
    values ('Y', 'mortgage', (select house_id from lot where street like '121 W. North Street'), 
        (select employee_id from sales_agent where license_number like '897859'));


delete from construction_project;
insert into construction_project(start_date, estimated_end_date, project_manager_employee_id, crew_id, house_id)
    values (TO_DATE('05-JUN-13'), TO_DATE('05-JUN-14'), 
        (select e.employee_id from project_manager pm, employee e where first_name like 'Jim' and last_name like 'Roberts'),
        (select crew_id from crew where crew_manager_employee_id = (select employee_id from employee where first_name like 'James' and last_name like 'Smiley')),
        (select house_id from lot where street like '121 W. North Street'));


delete from stage;
insert into stage(stage_number, description)
    values ('1', 'Permits, prepare land and pour foundation');
insert into stage(stage_number, description)
    values ('2', 'Build frame, roof, insulation');
insert into stage(stage_number, description)
    values ('3', 'Pipes, electricial, wiring');
insert into stage(stage_number, description)
    values ('4', 'Intall windows, exterior');
insert into stage(stage_number, description)
    values ('5', 'Water, heating, inspection');
insert into stage(stage_number, description)
    values ('6', 'Install flooring, built-ins');
insert into stage(stage_number, description)
    values ('7', 'Paint and install pictures. Landscaping.');


delete from option_choice;
insert into option_choice(option_category, description, price, last_allowed_stage_id)
    values ('Fixture', 'Nickel-finish bathroom fixtures', 456.67,
    (select stage_id from stage where stage_number = '4'));

insert into option_choice(option_category, description, price, last_allowed_stage_id)
    values ('Wall Texture', 'Plaster art', 4356.43, 
    (select stage_id from stage where stage_number = '3'));
    
insert into option_choice(option_category, description, price, last_allowed_stage_id)
    values ('Fixture', 'Nickel-finish kitchen fixtures', 356.67,
    (select stage_id from stage where stage_number = '5'));
    
insert into option_choice(option_category, description, price, last_allowed_stage_id)
    values ('Wall Texture', 'Stucco', 25000.00, 
    (select stage_id from stage where stage_number = '7'));


delete from construction_project_stage;
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('05-JUN-13'), TO_DATE('15-JUN-13'), TO_DATE('15-JUN-13'),
    (select construction_project_id from construction_project where start_date = TO_DATE('05-JUN-13')),
    (select stage_id from stage where stage_number = '1'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('16-JUN-13'), TO_DATE('25-JUL-13'), TO_DATE('26-JUL-13'),
    (select construction_project_id from construction_project where start_date = TO_DATE('05-JUN-13')),
    (select stage_id from stage where stage_number like '2'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('26-JUL-13'), TO_DATE('11-DEC-13'), TO_DATE('12-DEC-13'),
    (select construction_project_id from construction_project where start_date = TO_DATE('05-JUN-13')),
    (select stage_id from stage where stage_number like '3'));
insert into construction_project_stage(start_date, estimated_end_date, construction_project_id, stage_id)
    values (TO_DATE('12-DEC-13'), TO_DATE('04-FEB-14'),
    (select construction_project_id from construction_project where start_date = TO_DATE('05-JUN-13')),
    (select stage_id from stage where stage_number like '4'));

delete from selected_stage_option;
insert into selected_stage_option(selected_date, option_choice_id, construction_project_stage_id, customer_price)
    values (TO_DATE('15-FEB-12'),
        (select option_choice_id from option_choice where option_category like 'Fixture' and description like 
            'Nickel-finish bathroom fixtures'),
        (select construction_project_stage_id from construction_project_stage cs
            where cs.start_date = TO_DATE('12-DEC-13')),
        545.34
        );
insert into selected_stage_option(selected_date, option_choice_id, construction_project_stage_id, customer_price)
    values (TO_DATE('16-FEB-12'),
        (select option_choice_id from option_choice where option_category like 'Wall Texture' and description like 
            'Plaster art'),
        (select construction_project_stage_id from construction_project_stage cs
            where cs.start_date = TO_DATE('12-DEC-13')),
        53.53
        );

delete from task;
insert into task(name, selected_stage_option_id)
    values ('install fixture', 
        (select selected_stage_option_id from selected_stage_option where selected_date = TO_DATE('15-FEB-12')));
insert into task(name, selected_stage_option_id)
    values ('plaster art installation', 
        (select selected_stage_option_id from selected_stage_option where selected_date = TO_DATE('15-FEB-12')));

delete from task_update;
insert into task_update(update_date, percent_complete, comments, employee_id, task_id)
    values(TO_DATE('16-FEB-12'), 100, 'Installed the fixture.', 
        (select e.employee_id from project_manager pm, employee e where e.first_name like 'Jim' and e.last_name like 'Roberts'),
        (select task_id from task where name like 'install fixture'));
insert into task_update(update_date, percent_complete, comments, employee_id, task_id)
    values(TO_DATE('16-FEB-12'), 50, 'Purchase the fixture.', 
        (select e.employee_id from project_manager pm, employee e where e.first_name like 'Jim' and e.last_name like 'Roberts'),
        (select task_id from task where name like 'install fixture'));


--house 2, completed today

insert into house(escrow_amount, is_reversed, financing_info, house_layout_id)
    values (89885.60, 'N', 'Financing from PNC Bank', (select house_layout_id from house_layout where name like 'Five bedroom, Garage'));

update lot
    set house_id = (select house_id from house where financing_info like 'Financing from PNC Bank')
    where street like '122 W. North Street';

insert into customer(first_name, last_name, phone_number, mortgage_info, app_user_id)
    values ('Molly', 'North', '412-137-9809', 'American Bank owns this mortgage', 
        (select app_user_id from application_user where username like 'Molly North'));

insert into contract(submitted_date, time_limit_date, is_terminated, disclosure_form_id, subdivision_agreement_id, house_id)
    values (TO_DATE('06-JUN-12'), TO_DATE('15-JAN-14'), 'N',
    (select disclosure_form_id from disclosure_form where start_date = TO_DATE('12-NOV-12')),
    (select subdivision_agreement_id from subdivision_agreement sa where sa.subdivision_id = (select subdivision_id from subdivision where name like 'Riverview') and end_date is null),
    (select house_id from lot where street like '122 W. North Street'));

insert into customer_contract(customer_id, contract_id)
    values ((select customer_id from customer where first_name like 'Molly' and last_name like 'North'),
    (select contract_id from contract where submitted_date = TO_DATE('06-JUN-12')));

insert into floor(description, house_id)
    values ('first floor', (select house_id from lot where street like '122 W. North Street'));
insert into floor(description, house_id)
    values ('basement', (select house_id from lot where street like '122 W. North Street'));
insert into floor(description, house_id)
    values ('second floor', (select house_id from lot where street like '122 W. North Street'));

--issues
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'first floor'), 
    (select room_id from room where room_type like 'Kitchen'), '20X14', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'first floor'), 
    (select room_id from room where room_type like 'Bathroom'), '20X14', 1);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '12X12', 2); 
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '14X12', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '14X12', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '14X12', 3);
insert into room_on_a_floor(floor_id, room_id, room_size, num_windows)
    values((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'), 
    (select room_id from room where room_type like 'Bedroom'), '16X16', 5); 
insert into room_on_a_floor(floor_id, room_id)
    values ((select floor_id from floor where house_id = (select house_id from lot where street like '122 W. North Street') and description = 'second floor'),
    (select room_id from room where room_type like 'Bathroom'));


insert into house_sales_agent(start_date, is_main_sales_agent, sales_agent_employee_id, house_id)
    values (TO_DATE('05-JUN-12'), 'Y', 
        (select employee_id from sales_agent where license_number like '545354'),
        (select house_id from lot where street like '122 W. North Street'));


insert into sale(escrow_paid, financing_option, house_id, employee_id)
    values ('Y', 'mortgage', (select house_id from lot where street like '122 W. North Street'), 
        (select employee_id from sales_agent where license_number like '897859'));


insert into construction_project(start_date, estimated_end_date, end_date, project_manager_employee_id, crew_id, house_id)
    values (TO_DATE('15-JUN-12'), TO_DATE('31-DEC-13'), Sysdate,
        (select e.employee_id from project_manager pm, employee e where first_name like 'Jim' and last_name like 'Roberts'),
        (select crew_id from crew where crew_manager_employee_id = (select employee_id from employee where first_name like 'James' and last_name like 'Smiley')),
        (select house_id from lot where street like '122 W. North Street'));

insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('05-FEB-11'), TO_DATE('15-FEB-11'), TO_DATE('15-FEB-11'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number = '1'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('16-FEB-11'), TO_DATE('25-JUL-11'), TO_DATE('26-JUL-11'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '2'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('26-JUL-11'), TO_DATE('11-DEC-11'), TO_DATE('12-DEC-11'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '3'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('12-DEC-11'), TO_DATE('04-FEB-12'), TO_DATE('04-FEB-12'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '4'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('05-FEB-12'), TO_DATE('04-JUN-12'), TO_DATE('10-JUN-12'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '5'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('10-JUN-12'), TO_DATE('20-JUL-12'), TO_DATE('21-JUL-12'),
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '6'));
insert into construction_project_stage(start_date, estimated_end_date, end_date, construction_project_id, stage_id)
    values (TO_DATE('21-JUL-12'), TO_DATE('05-AUG-12'), sysdate,
    (select construction_project_id from construction_project where start_date = TO_DATE('15-JUN-12')),
    (select stage_id from stage where stage_number like '7'));

insert into selected_stage_option(selected_date, option_choice_id, construction_project_stage_id, customer_price)
    values (TO_DATE('17-JUL-12'),
        (select option_choice_id from option_choice where description like 
            'Nickel-finish kitchen fixtures'),
        (select construction_project_stage_id from construction_project_stage cs
            where cs.start_date = TO_DATE('10-JUN-12')),
        898.34);

insert into task(name, selected_stage_option_id)
    values ('install kitchen fixture', 
        (select selected_stage_option_id from selected_stage_option where selected_date = TO_DATE('17-JUL-12')));

insert into task_update(update_date, percent_complete, comments, employee_id, task_id)
    values(TO_DATE('15-JUL-12'), 100, 'Installed the fixture.', 
        (select e.employee_id from project_manager pm, employee e where e.first_name like 'Jim' and e.last_name like 'Roberts'),
        (select task_id from task where name like 'install kitchen fixture'));

insert into task_update(update_date, percent_complete, comments, employee_id, task_id)
    values(TO_DATE('14-JUL-12'), 50, 'Purchase the fixture.', 
        (select e.employee_id from project_manager pm, employee e where e.first_name like 'Jim' and e.last_name like 'Roberts'),
        (select task_id from task where name like 'install kitchen fixture'));


--Function: The number of employees work for Eggshell

CREATE OR REPLACE PROCEDURE employee_number
AS
	employee_no NUMBER;
BEGIN
	employee_no := cal_employee_no();
	DBMS_OUTPUT.PUT_LINE('The number of the employee work for eggshell is: '||employee_no||'.');
END;
/

CREATE OR REPLACE FUNCTION cal_employee_no
RETURN NUMBER
AS
	EM employee.employee_id%TYPE;
	employee_no NUMBER;
	
	CURSOR c1 is
	SELECT employee_id FROM employee;
BEGIN
	employee_no := 0;
	
	Open c1;
	LOOP
		FETCH c1 INTO EM;
		EXIT WHEN c1%NOTFOUND;
		employee_no := employee_no + 1;
	END LOOP;
	Close c1;
	RETURN employee_no;

EXCEPTION
	WHEN INVALID_CURSOR THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is invalid.');
	WHEN CURSOR_ALREADY_OPEN THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is already opened.');
	WHEN OTHERS THEN
		 DBMS_OUTPUT.PUT_LINE ('The PLSQL function executed by '||USER||
		 	' returned and unhandled exception on '||SYSDATE||'.');


END;
/

--Procedure for job

CREATE OR REPLACE PROCEDURE Update_Construction_End_Today


AS
CP CONSTRUCTION_END_TODAY%ROWTYPE;

CURSOR c1 is
	SELECT 
	construction_project_id,
	start_date,
	end_date,
	project_manager_employee_id,
	crew_id,
	house_id 
	FROM CONSTRUCTION_PROJECT
	WHERE TO_CHAR(CONSTRUCTION_PROJECT.end_date,'DD-MM-YY') = TO_CHAR(SYSDATE,'DD-MM-YY');

BEGIN
	OPEN c1;
	LOOP
		FETCH c1 INTO CP;
		EXIT WHEN c1%NOTFOUND;
		
		INSERT INTO CONSTRUCTION_END_TODAY(construction_project_id, start_date, end_date, project_manager_employee_id,
			crew_id, house_id)
		Values(CP.construction_project_id,
			   CP.start_date,
			   CP.end_date,
			   CP.project_manager_employee_id,
			   CP.crew_id,
			   CP.house_id);

	END LOOP;
	Close c1;
	COMMIT;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE ('No such employee.');
	WHEN INVALID_CURSOR THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is invalid.');
	WHEN CURSOR_ALREADY_OPEN THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is already opened.');
	WHEN OTHERS THEN
		 DBMS_OUTPUT.PUT_LINE ('The PLSQL procedure executed by '||USER||
		 	' returned and unhandled exception on '||SYSDATE||'.');


END;
/

-- Drop Job
BEGIN
DBMS_SCHEDULER.DROP_JOB(job_name=>'find_construction_end_today');
END;
/


-- This job refresh the consturction_end_today table everyday
--  to see which construction project should end today.
-- Need to create a new table - CONSTRUCTION_END_TODAY 

BEGIN
DBMS_SCHEDULER.CREATE_JOB
(
    job_name            => 'find_construction_end_today',
    job_type            => 'STORED_PROCEDURE',
    job_action          => 'Update_Construction_End_Today',
    repeat_interval     => 'FREQ=SECONDLY; INTERVAL=30',
    comments            => 'Update Construction_End_Today table'
);

END;
/




--Start job
BEGIN
DBMS_SCHEDULER.RUN_JOB(job_name=>'find_construction_end_today');
END;
/

--List all the sales of a sales agent

-- Create the package header 
create or replace package list_sales 
AS 
  procedure sales (em_id IN employee.employee_id%TYPE);
END list_sales;
/


-- This is a package
--Create the package bodies
create or replace package body list_sales 
AS

  procedure sales (em_id IN employee.employee_id%TYPE)
  AS
  	FN employee.first_name%TYPE;
  	LN employee.last_name%TYPE;
  	SR sale%ROWTYPE;
  	
  	CURSOR c1 is
	  SELECT * FROM sale
	  where sale.employee_id = em_id;

  BEGIN
  	select employee.first_name, employee.last_name
  	into FN, LN
  	from employee
  	where employee.employee_id = em_id;
  	DBMS_OUTPUT.PUT_LINE('The employee No.' ||em_id||' '||FN||' '||LN||
  										 'has the following sales:' );
  	DBMS_OUTPUT.NEW_LINE;
  	
		OPEN c1;
		LOOP
			FETCH c1 INTO SR;
			EXIT WHEN c1%NOTFOUND;
			DBMS_OUTPUT.PUT_LINE('The sale No.'||SR.sale_id||' of house No.'||SR.house_id||'. ');
			DBMS_OUTPUT.NEW_LINE;
		END LOOP;
		Close c1;

	EXCEPTION
	
	WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE ('No such employee.');
		WHEN INVALID_CURSOR THEN
			DBMS_OUTPUT.PUT_LINE ('The employee has no sales.');
		WHEN CURSOR_ALREADY_OPEN THEN
			DBMS_OUTPUT.PUT_LINE ('The cursor is already opened.');
		WHEN OTHERS THEN
		 	DBMS_OUTPUT.PUT_LINE ('The PLSQL procedure executed by '||USER||
		 	' returned and unhandled exception on '||SYSDATE||'.');
	END;
	
END list_sales;
/ 

--Report1

--1.Construction status of a given house

CREATE OR REPLACE PROCEDURE display_home_status
	( house_no IN house.house_id%TYPE
	)
AS

FN Customer.first_name%TYPE;
LN Customer.last_name%TYPE;
HN Contract.house_id%TYPE;
SD Construction_project.start_date%TYPE;
ED Construction_project.end_date%TYPE;
EsD Construction_project.estimated_end_date%TYPE;

BEGIN
	SELECT Customer.first_name, Customer.last_name, Contract.house_id, 
				 Construction_project.start_date, Construction_project.end_date,
				 Construction_project.estimated_end_date
  	INTO FN, LN, HN, SD, ED, EsD
	FROM Customer LEFT JOIN
	Customer_contract on Customer.customer_id = Customer_contract.customer_id LEFT JOIN
	Contract on Customer_contract.contract_id = Contract.contract_id LEFT JOIN
	House on Contract.house_id = House.house_id LEFT JOIN
	Construction_project on House.house_id = Construction_project.house_id
	WHERE House.house_id = house_no
	and contract.is_terminated = 'N';
	
	IF ED is NULL THEN
		 DBMS_OUTPUT.PUT_LINE('The construction project of customer: '||FN||' '||LN|| 
		 											  ' for house No.'||HN||' has not finished yet. '
		 											  ||'It started on '||SD||
		 										    '. The estimated finish date is: '||EsD||'.');
	ELSE
		DBMS_OUTPUT.PUT_LINE('The construction project of customer: '||FN||' '||LN|| 
		 											  ' for house No.'||HN||' has finished! '
		 											  ||'It started on '||SD|| 
		 											  '. It finished on '||ED||'.');
	
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE ('No such house.');
	WHEN OTHERS THEN
		 DBMS_OUTPUT.PUT_LINE ('The PLSQL procedure executed by '||USER||
		 	' returned and unhandled exception on '||SYSDATE||'.');

END;
/

--Report2
--2.Which project manager works on which construction project. (Assignment)



CREATE OR REPLACE PROCEDURE PM_Assignment
AS
CP construction_project%ROWTYPE;
FN employee.first_name%TYPE;
LN employee.last_name%TYPE;

CURSOR c1 is
	SELECT * FROM CONSTRUCTION_PROJECT;

BEGIN
	OPEN c1;
	LOOP
		FETCH c1 INTO CP;
		EXIT WHEN c1%NOTFOUND;
		
		SELECT e.first_name, e.last_name
		INTO FN,LN
		FROM employee e
		WHERE e.employee_id = CP.project_manager_employee_id;
		
		DBMS_OUTPUT.PUT_LINE('The employee No.'||CP.project_manager_employee_id||
										' Name:'||FN||' '||LN||
										' is working on project No.'||CP.construction_project_id||
										'.');
		DBMS_OUTPUT.NEW_LINE;
	END LOOP;
	Close c1;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE ('No such employee.');
	WHEN INVALID_CURSOR THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is invalid.');
	WHEN CURSOR_ALREADY_OPEN THEN
		DBMS_OUTPUT.PUT_LINE ('The cursor is already opened.');
	WHEN OTHERS THEN
		 DBMS_OUTPUT.PUT_LINE ('The PLSQL procedure executed by '||USER||
		 	' returned and unhandled exception on '||SYSDATE||'.');


END;
/

--View1

--1. Customer information of all the unfinished houses


--set the format??
--Assume that if the construction is not finished, the end_date is NULL.
CREATE OR REPLACE VIEW view_unfinished_houses AS
	SELECT h.house_id, con.contract_id, c.customer_id, 
				 c.first_name AS FN, c.last_name AS LN, c.phone_number AS PhoneNo,
				 cp.estimated_end_date AS Estimated_End_Date
	FROM construction_project cp
	LEFT JOIN house h on h.house_id = cp.house_id
	LEFT JOIN contract con on cp.house_id = con.house_id
	LEFT JOIN customer_contract cc on con.contract_id = cc.contract_id
	LEFT JOIN Customer c on cc.customer_id = c.customer_id
	WHERE cp.end_date is NULL
	AND con.is_terminated like 'N';

--View2

--2. All empty lot

--Assume that if a lot is empty then there is no house_id assigned to the lot.
CREATE OR REPLACE VIEW view_emptylot AS
	SELECT l.lot_id, l.latitude, l.longitude, l.subdivision_id, s.name
	FROM Lot l
	LEFT JOIN Subdivision s on l.subdivision_id = s.subdivision_id
	WHERE house_id is NULL;

--CREATE INDEXES
DROP INDEX ind_contract_cust_id;
DROP INDEX ind_contract_cntrct_id;
DROP INDEX ind_prj_house_id;
DROP INDEX ind_prj_pm_id;

CREATE INDEX ind_contract_cust_id on CUSTOMER_CONTRACT (customer_id); 
CREATE INDEX ind_contract_cntrct_id on CUSTOMER_CONTRACT (contract_id); 
CREATE INDEX ind_prj_house_id on CONSTRUCTION_PROJECT (house_id); 
CREATE INDEX ind_prj_pm_id on CONSTRUCTION_PROJECT (project_manager_employee_id); 

--CREATE ROLES AND USERS
DROP ROLE sales_agent;
CREATE ROLE sales_agent;
GRANT CONNECT, CREATE SESSION, RESOURCE to sales_agent;
GRANT select, update, insert, delete on customer to sales_agent;
GRANT select, update, insert, delete on house to sales_agent;
GRANT select, update, insert, delete on contract to sales_agent;
GRANT select, update, insert, delete on sale to sales_agent;
GRANT select, update, insert, delete on house_sales_agent to sales_agent;
GRANT select, update, insert, delete on disclosure_form to sales_agent;
GRANT select, update, insert, delete on subdivision_agreement to sales_agent;
GRANT select, update, insert, delete on floor to sales_agent;
GRANT select, update, insert, delete on room_on_a_floor to sales_agent;
GRANT select, update, insert, delete on room to sales_agent;
GRANT select, update, insert, delete on selected_stage_option to sales_agent;
GRANT select on view_emptylot to sales_agent;
GRANT select on house_layout to sales_agent;
GRANT select on construction_project to sales_agent;
GRANT select on option_choice to sales_agent;
GRANT select on stage to sales_agent;
GRANT select on subdivision to sales_agent;
GRANT select on school_district to sales_agent;
GRANT select on school to sales_agent;
GRANT select on subdivision_allowable_style to sales_agent;
GRANT select on style to sales_agent;
GRANT select on style_elevation to sales_agent;
GRANT select on elevation to sales_agent;
GRANT execute on list_sales to sales_agent;

DROP ROLE project_manager;
CREATE ROLE project_manager;
GRANT CONNECT, CREATE SESSION, RESOURCE to project_manager;
GRANT select, update, insert, delete on house to project_manager;
GRANT select, update, insert, delete on construction_project to project_manager;
GRANT select, update, insert, delete on construction_project_stage to project_manager;
GRANT select, update, insert, delete on task to project_manager;
GRANT select, update, insert, delete on task_update to project_manager;
GRANT select, update, insert, delete on construction_worker_crew to project_manager;
GRANT select, update, insert, delete on crew to project_manager;
GRANT select, update, insert, delete on construction_worker to project_manager;
GRANT select, update, insert, delete on lot to project_manager;
GRANT select on view_unfinished_houses to project_manager;
GRANT select on house_layout to project_manager;
GRANT select on stage to project_manager;
GRANT select on selected_stage_option to project_manager;
GRANT select on option_choice to project_manager;
GRANT select on floor to project_manager;
GRANT select on room_on_a_floor to project_manager;
GRANT select on room to project_manager;
GRANT execute on display_home_status to project_manager;

DROP USER sa_example;
CREATE USER sa_example IDENTIFIED BY sa_example_pw
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp;
GRANT sales_agent TO sa_example;

DROP USER pm_example;
CREATE USER pm_example IDENTIFIED BY pm_example_pw
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp;
GRANT project_manager TO pm_example;



